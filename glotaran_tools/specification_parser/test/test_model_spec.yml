type: kinetic

options:
  iterations: 10
  gradient: finite_difference      # default
  method: non_linear_least_squares # default
  parameter_ordering: relative #absolute, relative # maybe labeled
  temperature: 293

# For each dataset either the relative path or absolute path can be given
# The absolute path is OS dependent

datasets:
  - label: dataset1
    type: spectral
    megacomplexes: [cmplx1]
    path: 'data/dataset1.ascii'
    initial_concentration: inputD1 # refers to the first element in the absorption_vectors list
    irf: irf1
    dataset_scaling: 1 # scale dataset with parameter 78
    megacomplex_scaling:
      - megacomplexes: [cmplx1] # optional
        compartments: [1, 2]
        parameter: 21 # 75th parameter
      - [[cmplx1], [1, 2], 21] # alternative, order matters!
  - label: dataset2
    type: spectral
    megacomplexes: [cmplx2]
    path: 'data/dataset2.ascii'
    initial_concentration: inputD2
    irf: irf2
    dataset_scaling: 2 # scale dataset with parameter 78
    megacomplex_scaling:
      - megacomplexes: [cmplx1] # optional
        compartments: [1, 2]
        parameter: 21 # 75th parameter
      - [[cmplx1], [1, 2], 21] # alternative, order matters!

irf: #specific to kinetic or spectro_temporal model
  - label: irf1
    type: gaussian
    center: 1
    width: 2
    center_dispersion: [3] # dispersion is of 1st order
    width_dispersion: [4] # dispersion is of 1st order
    normalize: true
  - [irf2, gaussian, 1, 2, 3, [4], true] # compact

initial_concentrations: #equal to the total number of compartments
  - label: inputD1
    parameter: [1,2,3] #these are indices in the total prameter vector
  - label: inputD2
    parameter: [1,2,3]

# Convention matrix notation column = source, row = target compartment
# (2,1) means from 1 to 2
k_matrices:
  - label: km1
    matrix: {
      '(1,1)': 31,
      '(2,1)': 32,
      '(1,2)': 33,
      '(3,1)': 34,
      '(1,3)': 35,
      '(4,1)': 36,
      '(1,4)': 37,
}

# The input vector for a megacomplex is determined in the following way:
# first take the relevant absorption_vector
# then apply the dataset specific scaling parameters
# Example:
# cmplx3:
# Step 1: [71,2,2,2,73,74,2,74,73,72,2,2,2]
# Step 2: [71,2,2,2,73*75,74*75,2,74,73,72,2,2,2]
megacomplexes:
    - label: cmplx1
      k_matrices: [km1] # A megacomplex has one or more k-matrices
    - label: cmplx2
      k_matrices: km2
    - [cmplx3, [km3]]

compartment_constraints:
  - type: zero
    compartment: 5
    intervals: ['(1,100)', '(2,200)']
  - [zero, 5, ['(1,100)', '(2,200)']]
  - type: equal
    compartment: 5
    intervals: ['(60, 700)']
    target: 9
    parameter: 54 # usually fixed
  - type: equal_area
    compartment: 3
    intervals: ['(670, 810)']
    target: 1
    parameter: 55 # usually fixed
    weight: 0.0016
    # The area under the spectrum of the 3rd component parameter 55 times the area under the 1st component, from wavelength 670 to 810 is added as penalty to the residual with weight 0.0016

parameter_constraints:
  - type: fix
    parameter: [1, 2, 3, 54] # fix some parameters
  - [fix, [1,2,3]] # compact
  - type: bound
    range: '(100,150)' # range of parameters
    lower: 0 # no upper specified => no upper bound
  - [bound, '(100,120)', NaN, 7E-8] # compact, lower is NaN, so only upper bound

relations:
  - parameter: 86
    to: {const: 0, 89: 1, 90: 1, 87: -1.0} #Theta86 = 0 +1*theta89 + 1*theta90 -1*theta87
  - [87, {const: 2.6, 83: 1, 84: 1, 81: -1.0}]
  - [89, 30] # equality

parameter:
  - 4.13E-02
  - 1
  - ["spectral_equality" , 1.78]
